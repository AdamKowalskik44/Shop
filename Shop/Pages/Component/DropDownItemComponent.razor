@using Shop.Data
@using Shop.Services
@using Shop.Data.CustomFieldTypes
@inherits OwningComponentBase<DropDownItemService>

<AuthorizeView Roles="admin" Context="auth">
    <Authorized>
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>@(CurrentCustomField.CategoryId != 0 ? "Update" : "Create")</h3>
                        <button type="button" class="close" @onclick="Close">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="CurrentCustomField" Context="CustomField" OnValidSubmit="@ValidSubmit">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <ValidationSummary></ValidationSummary>
                            <div class="row">
                                <div class="col-9">
                                    <div class="row py-2">
                                        <div class="col-3">
                                            Field Name
                                        </div>
                                        <div class="col-9">
                                            <input class="form-control" type="text" @bind="CurrentCustomField.CustomFieldName" />
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-3">
                                            Category
                                        </div>
                                        <div class="col-9">
                                            <select @bind="CurrentCustomField.CategoryId" class="form-control">
                                                @foreach (Category category in Categories)
                                                {
                                                    <option class="dropdown-item" value="@category.CategoryId">@category.CategoryName</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-3">
                                            Field Type
                                        </div>
                                        <div class="col-9">
                                            <select @bind="CurrentCustomField.FieldType" class="form-control">
                                                @foreach (CustomFieldType customFieldType in Enum.GetValues(typeof(CustomFieldType)))
                                                {
                                                    <option class="dropdown-item" value="@customFieldType">@customFieldType</option>
                                                }
                                            </select>
                                        </div>
                                    </div>

                                    @if (CurrentCustomField.FieldType == CustomFieldType.dropDown)
                                    {
                                        @foreach (var dropDownItem in dropDownItems)
                                        {
                                            <div class="row py-2">
                                                <div class="col-3">
                                                    Item:
                                                </div>
                                                <div class="col-7">
                                                    <input class="form-control" type="text" @bind="dropDownItem.DropDownItemName" />
                                                </div>
                                                <div class="col-2">
                                                    <button class="btn btn-primary" type="button" @onclick="() => DeleteItem(dropDownItem)">Delete</button>
                                                </div>
                                            </div>
                                        }
                                        <div class="row py-2">
                                            <div class="col-3">
                                                New Item:
                                            </div>
                                            <div class="col-7">
                                                <input class="form-control" type="text" @bind="currentDropDownItem.DropDownItemName" />
                                            </div>
                                            <div class="col-2">
                                                <button class="btn btn-primary" type="button" @onclick="() => SaveItem(currentDropDownItem)">Add</button>
                                            </div>
                                        </div>
                                    }

                                    <div class="row py-2">
                                        <div class="col-4">

                                        </div>
                                        <div class="col-8">
                                            <button class="btn btn-primary form-control" type="submit">Submit</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public CustomField CurrentCustomField { get; set; }

    [Parameter]
    public List<Category> Categories { get; set; }

    [Parameter]
    public EventCallback Close { get; set; }

    [Parameter]
    public EventCallback<CustomField> Submit { get; set; }

    private List<DropDownItem> dropDownItems;
    private DropDownItem currentDropDownItem;

    protected override void OnInitialized()
    {
        dropDownItems = Service.GetDropDownItems(CurrentCustomField.CustomFieldId);
        currentDropDownItem = new DropDownItem();
        currentDropDownItem.DropDownItemId = 0;
        currentDropDownItem.CustomFieldId = CurrentCustomField.CustomFieldId;
    }

    private void ValidSubmit()
    {
        foreach (var dropDownItem in dropDownItems)
        {
            SaveItem(dropDownItem);
        }
        Submit.InvokeAsync(CurrentCustomField);
    }

    private void SaveItem(DropDownItem dropDownItem)
    {
        var result = false;

        if (dropDownItem.DropDownItemName != null && dropDownItem.DropDownItemName != "")
        {
            if (dropDownItem.DropDownItemId > 0)
            {
                result = Service.UpdateDropDownItem(dropDownItem);
            }
            else
            {
                result = Service.CreateDropDownItem(dropDownItem);
            }
        }

        dropDownItems = Service.GetDropDownItems(CurrentCustomField.CustomFieldId);
        currentDropDownItem = new DropDownItem();
        currentDropDownItem.DropDownItemId = 0;
        currentDropDownItem.CustomFieldId = CurrentCustomField.CustomFieldId;
    }

    private void DeleteItem(DropDownItem dropDownItem)
    {
        var result = false;
        result = Service.DeleteDropDownItem(dropDownItem);
        dropDownItems = Service.GetDropDownItems(CurrentCustomField.CustomFieldId);
    }
}
