@page "/UserManagement"
@using Microsoft.AspNetCore.Identity;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IToastService toastService

<AuthorizeView Roles="admin">
    <Authorized>
        <h3>User Management Page</h3>

        <table class="table table-striped">
            <tr>
                <th>Username</th>
                <th>Role</th>
                <th></th>
            </tr>

            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Key.UserName</td>
                    <td>@(user.Value == "" ? "user" : user.Value)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditRole(user.Key, user.Value)">Edit</button>
                    </td>
                </tr>
            }
        </table>

        @if (showPopup)
        {
            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="text-info">Update user role</h3>
                            <button type="button" class="close" @onclick="ClosePopup">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-9">
                                    <div class="row py-2">
                                        <div class="col-4">
                                            User Name
                                        </div>
                                        <div class="col-8">
                                            @currentUser.UserName
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-4">
                                            User role
                                        </div>
                                        <div class="col-8">
                                            <select @bind="currentUserRole" class="form-control">
                                                <option class="dropdown-item" value="user">user</option>
                                                <option class="dropdown-item" value="moderator">moderator</option>
                                                <option class="dropdown-item" value="admin">admin</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="row py-2">
                                        <div class="col-4">

                                        </div>
                                        <div class="col-8">
                                            <button class="btn btn-primary form-control" @onclick="ValidSubmit">Submit</button>
                                        </div>
                                    </div>
                                    <div style="margin-top:50px">
                                        <div class="row py-2">
                                            <div class="col-6">
                                                New Password:
                                            </div>
                                            <div class="col-6">
                                                <input class="form-control" type="password" @bind="newPassword" />
                                            </div>
                                        </div>
                                        <div class="row py-2">
                                            <div class="col-6">
                                                Confirm Password:
                                            </div>
                                            <div class="col-6">
                                                <input class="form-control" type="password" @bind="newPasswordConfirm" />
                                            </div>
                                        </div>
                                        <div class="py-2 row">
                                            <div class="col-6">

                                            </div>
                                            <div class="col-6">
                                                <button class="btn btn-primary form-control" style="width:100%" @onclick="ResetPassword">Reset password</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    Dictionary<IdentityUser, string> Users;
    IdentityUser currentUser;
    bool showPopup = false;
    string currentUserRole;
    string newPassword;
    string newPasswordConfirm;

    protected override void OnInitialized()
    {
        Task.Run(async () => await GetUserRolesAsync()).Wait();
    }

    private async Task GetUserRolesAsync()
    {
        Users = new Dictionary<IdentityUser, string>();
        List<IdentityUser> users = UserManager.Users.ToList();
        foreach (IdentityUser user in users)
        {
            IList<string> userRoles = await UserManager.GetRolesAsync(user);
            string roles = String.Join(", ", userRoles);
            Users.Add(user, roles);
        }
    }

    private void EditRole(IdentityUser user, string role)
    {
        currentUser = user;
        currentUserRole = role;
        showPopup = true;
    }

    private async void ValidSubmit()
    {
        if (currentUserRole == null || currentUserRole == string.Empty)
        {
            toastService.ShowWarning("Choose a role");
        }
        else
        {
            try
            {
                await UserManager.RemoveFromRoleAsync(currentUser, "admin");
                await UserManager.RemoveFromRoleAsync(currentUser, "moderator");
                if (currentUserRole == "admin" || currentUserRole == "moderator")
                {
                    await UserManager.AddToRoleAsync(currentUser, currentUserRole);
                }
                await GetUserRolesAsync();
                toastService.ShowSuccess("Role updated");
            }
            catch (Exception)
            {
                toastService.ShowWarning("We encountered a problem updating user role");
            }
        }
    }

    private async void ResetPassword()
    {
        if (newPassword != null && newPassword != string.Empty && newPasswordConfirm != null && newPasswordConfirm != string.Empty)
        {
            var passwordValidator = new PasswordValidator<IdentityUser>();
            var result = await passwordValidator.ValidateAsync(UserManager, null, newPasswordConfirm);
            if (newPassword == newPasswordConfirm && result.Succeeded)
            {
                try
                {
                    var code = await UserManager.GeneratePasswordResetTokenAsync(currentUser);
                    await UserManager.ResetPasswordAsync(currentUser, code, newPasswordConfirm);
                    newPassword = string.Empty;
                    newPasswordConfirm = string.Empty;
                    toastService.ShowSuccess("Password updated");
                }
                catch (Exception e)
                {
                    toastService.ShowWarning("We encountered a problem updating the password: " + e.Message);
                }
            }
            else
            {
                toastService.ShowWarning("Passwords are not the same or they do not meet the requirements");
            }
        }

    }

    private void ClosePopup()
    {
        currentUser = null;
        showPopup = false;
    }
}
