@page "/AddressPage"
@using Shop.Data
@using Shop.Data.ProductTypes
@using Shop.Data.Enums 
@using Shop.Services
@using Microsoft.AspNetCore.Identity
@using System.Text
@inject CartService cartService
@inject OrderService orderService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager
@inject UserManager<IdentityUser> userManager
@inherits OwningComponentBase<AddressService>

@if (isCartEmpty)
{
    <h3>Your cart is empty :(</h3>
}
else
{
    <h3 style="margin-bottom:100px">Delivery Address</h3>

    <EditForm Model="@address" OnValidSubmit="@ValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="row" style="margin-bottom:50px">
            <div class="col-6">
                <div class="row">
                    <div class="col-3 m-1">
                        Name:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.Name" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 m-1">
                        Street:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.Street" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 m-1">
                        City:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.City" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 m-1">
                        Phone Number:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.PhoneNumber" />
                    </div>
                </div>
            </div>
            <div class="col-6">
                <div class="row">
                    <div class="col-3 m-1">
                        Last Name:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.LastName" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 m-1">
                        Number:
                    </div>
                    <div class="col-2 m-1">
                        <input class="form-control" type="text" @bind="address.Number" />
                    </div>
                    /
                    <div class="col-2 m-1">
                        <input class="form-control" type="text" @bind="address.Number2" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-3 m-1">
                        Postal Code:
                    </div>
                    <div class="col-8 m-1">
                        <input class="form-control" type="text" @bind="address.PostalCode" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-4">

                    </div>
                    <div class="custom-control custom-checkbox col-7 m-1">
                        <input type="checkbox" class="custom-control-input" id="customCheck1" @bind="address.CurrentAddress">
                        <label class="custom-control-label" for="customCheck1">Mark as My current address</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <button class="btn btn-primary" style="width:100%" type="submit">Next</button>
            </div>
        </div>
    </EditForm>
    @if (showpopup)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4>Confirm Your Order</h4>
                    </div>
                    <div class="modal-body">
                        <h5>Products:</h5>
                        @foreach (var product in products)
                        {
                            <p>
                                @product.Key.Product.ProductName x @product.Value.Quantity (Total: @(product.Key.Product.Price * product.Value.Quantity))
                            </p>
                        }
                        <br />
                        <p>Total: @CalculateTotal()</p>
                        <br />
                        <h5>Delivery address:</h5>
                        <p>@address.Name @address.LastName</p>
                        @if (address.Number2 == string.Empty)
                        {
                            <p>@address.Street @address.Number</p>
                        }
                        else
                        {
                            <p>@address.Street @address.Number / @address.Number2</p>
                        }
                        <p>@address.City @address.PostalCode</p>
                        <p>@address.PhoneNumber</p>
                        <div class="row m-1">
                            <div class="col-6">
                                <button class="btn btn-warning" style="width:100%" @onclick="ClosePopup">Back</button>
                            </div>
                            <div class="col-6">
                                <button class="btn btn-success" style="width:100%" @onclick="PlaceOrder">Place Order</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    Address address;
    AuthenticationState authstate;
    Dictionary<ProductDTO, CartEntry> products;
    bool isCartEmpty;
    bool showpopup = false;

    protected override void OnInitialized()
    {
        Task.Run(async () => authstate = await authenticationStateProvider.GetAuthenticationStateAsync()).Wait();
        if (authstate.User.Identity.IsAuthenticated)
        {
            isCartEmpty = cartService.IsCartEmpty(userManager.GetUserId(authstate.User));
            address = Service.GetUserCurrentAddress(userManager.GetUserId(authstate.User));
            if (address == null)
            {
                address = new Address();
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!authstate.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/Identity/Account/Login", true);
        }
    }

    private void ValidSubmit()
    {
        Task.Run(async () => authstate = await authenticationStateProvider.GetAuthenticationStateAsync()).Wait();
        if (authstate.User.Identity.IsAuthenticated)
        {
            products = cartService.GetUserCartProducts(userManager.GetUserId(authstate.User));
            showpopup = true;
        }
    }

    private void ClosePopup()
    {
        showpopup = false;
    }

    private void PlaceOrder()
    {
        Task.Run(async () => authstate = await authenticationStateProvider.GetAuthenticationStateAsync()).Wait();
        if (authstate.User.Identity.IsAuthenticated)
        {
            Order newOrder = new Order();
            newOrder.OrderId = 0;
            newOrder.TotalAmount = CalculateTotal();
            newOrder.AmountPaid = 0;
            newOrder.isPaid = false;
            newOrder.ProductListHTML = BuildProductListHTML();
            newOrder.UserId = userManager.GetUserId(authstate.User);
            newOrder.OrderStatus = OrderStatus.placed;

            Order order = orderService.CreateOrder(newOrder);
            if (order != null)
            {
                address.AddressId = 0;
                address.OrderId = order.OrderId;
                if (address.CurrentAddress)
                {
                    address.UserId = userManager.GetUserId(authstate.User);
                }
                bool success = Service.CreateAddress(address);
                if (success)
                {
                    foreach (var product in products)
                    {
                        cartService.DeleteCartEntry(product.Value);
                    }
                    navigationManager.NavigateTo("/PaymentPage/" + order.OrderId);
                }
            }
        }
    }

    private float CalculateTotal()
    {
        float result = 0;
        foreach (var product in products)
        {
            result += product.Key.Product.Price * product.Value.Quantity;
        }
        return result;
    }

    private string BuildProductListHTML()
    {
        StringBuilder sb = new StringBuilder(string.Empty);

        foreach (var product in products)
        {
            sb.Append(product.Key.Product.ProductName + " x " + product.Value.Quantity + "<br />");
            sb.Append("&emsp;Price per unit: " + product.Key.Product.Price + "<br />");
            sb.Append("&emsp;Price total: " + (product.Key.Product.Price * product.Value.Quantity) + "<br />");
            sb.Append("&emsp;Description: " + product.Key.Product.ProducDescription + "<br />");
            foreach (var customField in product.Key.Fields)
            {
                sb.Append("&emsp;" + customField.Key.CustomFieldName + ": ");
                switch (customField.Value)
                {
                    case ProductFieldValueBool productFieldValue:
                        sb.Append(productFieldValue.Value);
                        break;
                    case ProductFieldValueInt productFieldValue:
                        sb.Append(productFieldValue.Value);
                        break;
                    case ProductFieldValueFloat productFieldValue:
                        sb.Append(productFieldValue.Value);
                        break;
                    case ProductFieldValueString productFieldValue:
                        sb.Append(productFieldValue.Value);
                        break;
                    case ProductFieldValueDDI productFieldValue:
                        sb.Append(productFieldValue.Value);
                        break;
                }
                sb.Append("<br />");

            }
            sb.Append("<br />");
        }

        return sb.ToString();
    }
}
