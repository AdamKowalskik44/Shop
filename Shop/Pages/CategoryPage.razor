@page "/category"
@page "/category/{Parameter1}"
@using Shop.Data
@using Shop.Services
@inherits OwningComponentBase<CategoryService>
@inject NavigationManager NavigationManager
@* Header + Add New *@
<AuthorizeView Roles="admin">
    <Authorized>
        <div class="container">
            <div class="container p-3">
                <div class="row">
                    <div class="col-9">
                        <h3 class="text-primary">Category List</h3>
                    </div>
                    <div class="col-3">
                        <button class="btn btn-primary form-control" @onclick="CreateCategory">
                            Add New Category
                        </button>
                    </div>
                </div>
            </div>

            @if (categories == null)
            {
                <p><em>Loading or no categories exist</em></p>
            }
            else
            {
                <div class="custom-control custom-switch">
                    <a style="margin-right:40px">Tree View</a>
                    <input type="checkbox" class="custom-control-input" id="customSwitch1" @onclick="ToggleTreeView" />
                    <label class="custom-control-label" for="customSwitch1">List View</label>
                    <br>
                </div>
                if (showTree)
                {
                    <ul>
                        <Shop.Pages.Component.CategoryTreeViewComponent Categories="@Service.GetRootCategories()"
                                                                        NavigateToCustomFieldCallback="NavigateToCustomField"
                                                                        EditCategoryCallback="EditCategory"
                                                                        DeleteCategoryCallback="DeleteCategory">
                        </Shop.Pages.Component.CategoryTreeViewComponent>
                    </ul>
                }
                else
                {
                    <div class="container border p-3">
                        <div class="row pt-4">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Parent Category</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var category in categories)
                                    {
                                        <tr>
                                            <td>@category.CategoryName</td>
                                            @if (Service.GetCategory(category.ParentCategoryId) != null)
                                            {
                                                <td>@Service.GetCategory(category.ParentCategoryId).CategoryName</td>
                                            }
                                            else
                                            {
                                                <td>Root Category</td>
                                            }
                                            <td>
                                                <div class="container">
                                                    <button class="btn btn-primary" style="width:200px" @onclick="() => NavigateToCustomField(category)">
                                                        Custom Fields
                                                    </button>
                                                    <button class="btn btn-primary" style="width:100px" @onclick="() => EditCategory(category)">
                                                        Edit
                                                    </button>
                                                    <button class="btn btn-danger" style="width:100px" @onclick="() => DeleteCategory(category)">
                                                        Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            }

            @if (showPopup)
            {
                <Shop.Pages.Component.CategoryComponent CurrentCategory="@currentCategory"
                                                        Categories="@categories"
                                                        ValidSubmit="ValidSubmit"
                                                        ClosePopup="ClosePopup">
                </Shop.Pages.Component.CategoryComponent>
            }

            @if (showPopupWarning)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="text-primary">@warningMessage</h3>
                            </div>
                            <div class="modal-body">
                                <button class="btn btn-primary" @onclick="ClosePopupWarning">OK</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {

    [Parameter]
    public string Parameter1
    {
        set
        {
            if (int.TryParse(value, out int result))
            {
                Category category = Service.GetCategory(result);
                if (category != null)
                {
                    EditCategory(category);
                }
            }
        }
    }

    List<Category> categories;
    Category currentCategory;

    //false = show list, true = show tree
    bool showTree = true;
    bool showPopup = false;
    bool showPopupWarning = false;
    string warningMessage = "";

    protected override void OnInitialized()
    {
        categories = Service.GetCategories();
    }

    private void CreateCategory()
    {
        currentCategory = new Category();
        currentCategory.CategoryId = 0;
        showPopup = true;
    }

    private void EditCategory(Category category)
    {
        currentCategory = category;
        showPopup = true;
    }

    private void DeleteCategory(Category category)
    {
        categories.Remove(category);
        Service.DeleteCategory(category);
        categories = Service.GetCategories();
    }

    private void DeleteCategory(int categoryId)
    {
        //categories.Remove(category);
        Service.DeleteCategory(categoryId);
        categories = Service.GetCategories();
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private void ValidSubmit()
    {
        var result = false;
        showPopup = false;
        Category parentCategory = Service.GetCategory(currentCategory.ParentCategoryId);

        if (currentCategory.CategoryId != 0 && currentCategory.CategoryId == parentCategory.ParentCategoryId)
        {
            ShowPopupWarning("Category cannot have it's parent category set as itself, and category cannot be child of category that is already child of itself");
        }
        else
        {
            if (currentCategory.CategoryId > 0)
            {
                result = Service.UpdateCategory(currentCategory);
            }
            else
            {
                result = Service.CreateCategory(currentCategory);
            }
        }

        categories = Service.GetCategories();
    }

    private void ParentCategorySelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            currentCategory.ParentCategoryId = id;
        }
    }

    private void ToggleTreeView()
    {
        showTree = !showTree;
    }

    private void ShowPopupWarning(string message)
    {
        showPopupWarning = true;
        warningMessage = message;
    }

    private void ClosePopupWarning()
    {
        showPopupWarning = false;
        warningMessage = "";
    }

    private void NavigateToCustomField(Category category)
    {
        NavigationManager.NavigateTo("/CustomField/" + category.CategoryId);
    }
}
